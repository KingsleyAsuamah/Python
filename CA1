#https://github.com/KingsleyAsuamah/Python/blob/master/CA1
#Please code a solution to the following problem, tracking your progress by commiting to GitHub, and submitting your progress after half an hour and after an hour to Moodle, as well as the final submission. 
#A shopping basket contains a number of line items, for example: eggs, rice, flour; each with a specific quantity. A basket may also have one discount code, for example eggs20. 
#The shop has a standard price list, as well as a set of currently valid discount codes, each of which confers a certain percentage discount for a list of eligible products.
#Produce a method which accepts a list of baskets, and outputs their values from highest to lowest.


from decimal import Decimal
from products import StoreItems
products={'eggs': 15, 'rice': 10, 'flour':5}

class Cart(object):

    def get_total(self):
        '''Return sum of cart items as a Decimal.'''
        return Decimal(0)


    def basket(self):
        my_products=StoreItems(products)
        self.assertTrue(type(cart.get_total()) is Decimal)


class Discount(object):

    def __init__(self, product):
        self.products = products

    def calculate_line_total(self, Basket_Discount, Storeitems, *0.2):
        return my_products.get_line_total(Storeitems)

        
#add product to basket
class Basket(self,products):
    my_products=StoreItems(products)
    products.add('eggs',10)
    products.add('rice',15)
    products.add('flour', 5)

#basket total
    total = products.get_total()

#Eligible for Discount?
    Basket_Discount = products.get_total(discount)
    no_discount_eggs = no_discount('eggs')
    no_discount_rice = no_discount('rice')
    no_discount_flour = no_discount('flour')
    discount_eggs = discounteggs('eggs', 1, eggs20)


def value(self):

        total=0

        for k,v in self.products.items():

            total+=v*discount[k]

        return total





#https://github.com/KingsleyAsuamah/Python/blob/master/CA1
